import numpy as np
import math
import sys
sys.float_info
from tensorflow.keras.datasets import mnist
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
def initialize_parameters(layer_dims):
    """input: an array of the dimensions of each layer in the network (layer 0 is the size of the flattened input, layer L is the output softmax)
output: a dictionary containing the initialized W and b parameters of each layer (W1…WL, b1…bL).
Hint: Use the randn and zeros functions of numpy to initialize W and b, respectively
"""
    print(layer_dims)
    initail_parameters = {}
    layer_num = 0
    for layer in range(len(layer_dims)-1):
        layer_num += 1
        initail_parameters['W'+str(layer_num-1)] = np.random.uniform(low=-(1/layer_dims[layer_num-1]),high=(1/layer_dims[layer_num-1]),size=(layer_dims[layer_num],layer_dims[layer_num-1]))
        initail_parameters['b' + str(layer_num-1)] = np.zeros(layer_dims[layer_num])
        print('Initialize layer: ',layer_num-1)

    # print(initail_parameters.keys())
    return initail_parameters

def linear_forward(A, W, b):
    """Description: Implement the linear part of a layer's forward propagation.

    input:
    A – the activations of the previous layer
    W – the weight matrix of the current layer (of shape [size of current layer, size of previous layer])
    B – the bias vector of the current layer (of shape [size of current layer, 1])

    Output:
    Z – the linear component of the activation function (i.e., the value before applying the non-linear function)
    linear_cache – a dictionary containing A, W, b (stored for making the backpropagation easier to compute)
    """
    # A(pre layer, number of examples)
    # W( current layer, pre layer)
    # WA (current layer, number of example)
    # b (current layer,1)
    # z (mex layer, number of examples
    b = b.reshape((-1, 1))
    B = np.tile(b,(1,A.shape[1]))
    Z = np.dot(W,A)+B
    linear_cache = {'A':A,'W':W,'b':b}
    return Z,  linear_cache

Z = np.array([5,2,3])

# softmax function
def sm(Zi):
    # print('Zi:',Zi)
    denominator = np.array(list(map(lambda x: np.exp(x), Zi))).sum()
    Ai = np.array(list(map(lambda x: np.exp(x) / denominator, Zi)))
    return (Ai)

def softmax(Z):
    """Input:
    Z – the linear component of the activation function

    Output:
    A – the activations of the layer
    activation_cache – returns Z, which will be useful for the backpropagation"""



    A = np.apply_along_axis(sm,0,Z)
    activation_cache = Z
    return A, activation_cache

def relu(Z):
    """Input:
    Z – the linear component of the activation function

    Output:
    A – the activations of the layer
    activation_cache (l,n)– returns Z, which will be useful for the backpropagation"""
    def rel(Z):
        Z = max(0, Z)
        return Z

    rel = np.vectorize(rel)
    A = rel(Z)
    return A, Z


def linear_activation_forward(A_prev, W, B, activation):
    """Description:
    Implement the forward propagation for the LINEAR->ACTIVATION layer

    Input:
    A_prev – activations of the previous layer
    W – the weights matrix of the current layer
    B – the bias vector of the current layer
    Activation – the activation function to be used (a string, either “softmax” or “relu”)

    Output:
    A – the activations of the current layer
    cache – a joint dictionary containing both linear_cache and activation_cache"""
    # print('activation: '+activation)
    Z, linear_cache = linear_forward(A_prev, W, B)

    if activation == 'relu':
        A, activation_cache = relu(Z)
    else:
        A, activation_cache = softmax(Z)


    return A , {'linear_cache':linear_cache,'activation_cache':activation_cache}


def L_model_forward(X, parameters, use_batchnorm = False):
    """Description:
    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SOFTMAX computation

    Input:
    X – the data, numpy array of shape (input size, number of examples)
    parameters – the initialized W and b parameters of each layer
    use_batchnorm - a boolean flag used to determine whether to apply batchnorm after the activation (note that this option needs to be set to “false” in Section 3 and “true” in Section 4).

    Output:
    AL – the last post-activation value (L,n)
    caches – a list of all the cache objects generated by the linear_forward function"""
    num_of_layers = int(len(parameters.keys())/2)
    layer_num = 0
    A_current = X.transpose()
    activation= 'relu'
    caches = []
    # print('\n========')
    for layer in range(num_of_layers):

        # print('forward layer # ' + str(layer_num))
        W_current = parameters['W'+str(layer_num)]
        B_current = parameters['b'+str(layer_num)]

        # in the last iteration - softmax
        if layer_num == (num_of_layers-1):
            activation = 'softmax'
            use_batchnorm = False
        A_current, current_cache = linear_activation_forward(A_current, W_current, B_current,activation)
        # print('A:', A_current)

        if use_batchnorm == True:
            A_current = np.apply_along_axis(apply_batchnorm,1,A_current)

        caches.append(current_cache)
        # print('A value: ',A_current)
        layer_num += 1
    AL = A_current

    return AL, caches # W L-1,L  b L , A L-1,n  Z L-1, n


def labelsToOHV(Y):
    # CONVERT y TO ONE HOT VECTORS
    ohv = np.zeros((Y.size, Y.max() + 1))
    ohv[np.arange(Y.size), Y] = 1
    return ohv


def compute_cost(AL, Y):
    """Description:
    Implement the cost function defined by equation. The requested cost function is categorical cross-entropy loss. The formula is as follows :
    cost=-1/m*∑_1^m▒∑_1^C▒〖y_i  log⁡〖(y ̂)〗 〗, where y_i is one for the true class (“ground-truth”) and y ̂ is the softmax-adjusted prediction (this link provides a good overview).

    Input:
    AL – probability vector corresponding to your label predictions, shape (num_of_classes, number of examples)
    Y – the labels vector (i.e. the ground truth)

    Output:
    cost – the cross-entropy cost

"""
    ohv = labelsToOHV(Y)
    # compute y hat logs
    log = np.vectorize(math.log)
    logAL = log(AL)
    # compute CE loss
    batch_size = len(Y)
    cost = -np.sum(np.transpose(ohv)*logAL)/batch_size
    return  cost


def apply_batchnorm(A):
    """    Description:
    performs batchnorm on the received activation values of a given layer.

    Input:
    A - the activation values of a given layer

    output:
    NA - the normalized activation values, based on the formula learned in class

    """
    mu = A.mean()
    sd = A.std()+0.001
    NA = 0.9*(A-mu)/sd + 0.1
    return NA


def relu_backward (dA, activation_cache):
    """Description:
    Implements backward propagation for a ReLU unit

    Input:
    dA – the post-activation gradient
    activation_cache – contains Z (stored during the forward propagation)

    Output:
    dZ – gradient of the cost with respect to Z
"""
    # print('da: ',dA.shape,'actCa: ', activation_cache.shape)
    relDiv = np.vectorize(lambda x: (x>0)*1)
    dR = relDiv(activation_cache)
    return dA*dR



def softmax_backward (dA, activation_cache):
    """Description:
    Implements backward propagation for a softmax unit

    Input:
    dA – the post-activation gradient
    activation_cache – contains Z (stored during the forward propagation)

    Output:
    dZ – gradient of the cost with respect to Z
"""
    # apply softmax on each instance data
    A = np.apply_along_axis(sm, 0, activation_cache)
    # compute the div

    segDiv = np.vectorize(lambda x: x*(1-x))
    dR = segDiv(A)
    dz = dA * dR
    return dz

def Linear_backward(dz, cache):
    """description:
    Implements the linear part of the backward propagation process for a single layer

    Input:
    dZ – the gradient of the cost with respect to the linear output of the current layer (layer l)
    cache – tuple of values (A_prev, W, b) coming from the forward propagation in the current layer

    Output:
    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
    dW -- Gradient of the cost with respect to W (current layer l), same shape as W
    db -- Gradient of the cost with respect to b (current layer l), same shape as b"""

    A_prev = cache['linear_cache']['A']
    W = cache['linear_cache']['W']
    m = A_prev.shape[1] # num of neurons , num of samples
    # print('shapes A: {}, dz: {}, W: {}'.format(A_prev.shape,dz.shape, W.shape))
    # multiply derivative of the cost with respect to the post activation of l with derivative of the Z=aw+b with respect to W
    dW = np.dot(dz, np.transpose(A_prev)) / m
    # multiply derivative of the cost with respect to the post activation of l (Z/C) with derivative of the Z=aw+b with respect to b (always one)
    db = np.sum(dz, axis=1) / m
    # multiply the derivative of Z=aw+b with respect to  A_prev with derivative of the cost with respect to the post activation of l-1
    dA_prev = np.dot(W.T, dz)

    return dA_prev, dW, db






def linear_activation_backward(dA, cache, activation):
    """Description:
    Implements the backward propagation for the LINEAR->ACTIVATION layer. The function first computes dZ and then applies the linear_backward function.

    Some comments:
        The derivative of ReLU is f^' (x)={■(1&if x>0@0&otherwise)┤
        The derivative of the softmax function is: p_i-y_i, where p_i is the softmax-adjusted probability of the class and y_i is the “ground truth” (i.e. 1 for the real class, 0 for all others)
        You should use the activations cache created earlier for the calculation of the activation derivative and the linear cache should be fed to the linear_backward function

    Input:
    dA – post activation gradient of the current layer
    cache – contains both the linear cache and the activations cache

    Output:
    dA_prev – Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev
    dW – Gradient of the cost with respect to W (current layer l), same shape as W
    db – Gradient of the cost with respect to b (current layer l), same shape as b
    """
    if activation == 'softmax':
        # divarite of the activation of A_l with respect to Z
        dz = softmax_backward (dA, cache['activation_cache'])
    else:
        dz = relu_backward (dA, cache['activation_cache'])


    dA_prev,dw, db = Linear_backward(dz, cache)

    return dA_prev,dw, db





def L_model_backward(AL, Y, caches):
    """Description:
    Implement the backward propagation process for the entire network.

    Some comments:
    the backpropagation for the softmax function should be done only once as only the output layers uses it and the RELU should be done iteratively over all the remaining layers of the network.

    Input:
    AL - the probabilities vector, the output of the forward propagation (L_model_forward)
    Y - the true labels vector (the "ground truth" - true classifications)
    Caches - list of caches containing for each layer: a) the linear cache; b) the activation cache

    Output:
    Grads - a dictionary with the gradients
                 grads["dA" + str(l)] = ...
                 grads["dW" + str(l)] = ...
                 grads["db" + str(l)] = ..."""

    numOfHiddenLayers = len(caches)
    l = numOfHiddenLayers-1
    Grads = {}
    # average dervarite of the cost  with respect  to Y (final A))
    ohv = labelsToOHV(Y)

    # dA =  -(np.transpose(ohv)/ AL).sum()/ len(Y)
    dA = -(np.transpose(ohv) - AL)
    dA_prev = dA

    for i in reversed(range(numOfHiddenLayers)):
        # print('backprop layer: ',i)
        cache = caches[i]
        if i == l: activation = 'softmax'
        else: activation = 'relu'

        dA_prev, dW, db = linear_activation_backward(dA_prev, cache, activation=activation)


        Grads["dA" + str(i)] = dA_prev
        Grads["dW" + str(i)] = dW
        Grads["db" + str(i)] = db

    return Grads


def Update_parameters(parameters, Grads, learning_rate):
    """Description:
    Updates parameters using gradient descent

    Input:
    parameters – a python dictionary containing the DNN architecture’s parameters
    grads – a python dictionary containing the gradients (generated by L_model_backward)
    learning_rate – the learning rate used to update the parameters (the “alpha”)

    Output:
    parameters – the updated values of the parameters object provided as input"""

    numOfHiddenLayers = int(len(parameters)/2)
    # print('\n========')
    for i in reversed(range(numOfHiddenLayers)):
        # print('update layer: ',i)

        parameters["W" + str(i)] =   parameters["W" + str(i)] -learning_rate*Grads["dW" + str(i)]
        parameters["b" + str(i)] =   parameters["b" + str(i)]-learning_rate*Grads["db" + str(i)]

    return parameters

def Predict(X, Y, parameters,use_batchnorm):
    """Description:
    The function receives an input data and the true labels and calculates the accuracy of the trained neural network on the data.

    Input:
    X – the input data, a numpy array of shape (height*width, number_of_examples)
    Y – the “real” labels of the data, a vector of shape (num_of_classes, number of examples)
    Parameters – a python dictionary containing the DNN architecture’s parameters

    Output:
    accuracy – the accuracy measure of the neural net on the provided data (i.e. the percentage of the samples for which the correct label receives the hughest confidence score). Use the softmax function to normalize the output values.
"""

    AL, caches = L_model_forward(X, parameters, use_batchnorm=use_batchnorm)

    pred = np.argmax(AL,axis=0)
    accuracy = (Y==pred).mean()
    print('accuracy: ', accuracy)
    return accuracy

def L_layer_model(X, Y, layers_dims, learning_rate,  batch_size, num_iterations = 100,use_batchnorm=False):
    """Description:
    Implements a L-layer neural network. All layers but the last should have the ReLU activation function, and the final layer will apply the softmax activation function. The size of the output layer should be equal to the number of labels in the data. Please select a batch size that enables your code to run well (i.e. no memory overflows while still running relatively fast).

    Hint: the function should use the earlier functions in the following order: initialize -> L_model_forward -> compute_cost -> L_model_backward -> update parameters

    Input:
    X – the input data, a numpy array of shape (height*width , number_of_examples)
    Comment: since the input is in grayscale we only have height and width, otherwise it would have been height*width*3
    Y – the “real” labels of the data, a vector of shape (num_of_classes, number of examples)
    Layer_dims – a list containing the dimensions of each layer, including the input
    batch_size – the number of examples in a single training batch.

    Output:
    parameters – the parameters learnt by the system during the training (the same parameters that were updated in the update_parameters function).
    costs – the values of the cost function (calculated by the compute_cost function). One value is to be saved after each 100 training iterations (e.g. 3000 iterations -> 30 values)."""
    num_of_batches = int(len(X)/batch_size)

    parameters = initialize_parameters(layer_dims)
    cost_ls = []
    acc_ls = []
    batch_cost_ls = []
    pre_cost = np.inf

    for i in range(num_iterations):
        try:
            new_order = np.random.permutation(len(Y))

            batch_x = np.array_split(X[new_order], num_of_batches)
            batch_y = np.array_split(Y[new_order], num_of_batches)

            # iter suumary
            AL, caches = L_model_forward(X, parameters, use_batchnorm=use_batchnorm)
            current_cost = compute_cost(AL, Y)
            acc = Predict(X, Y, parameters,use_batchnorm)
            cost_ls.append(current_cost)
            acc_ls.append(acc)
            print('cost of iter {}: {}, accuracy: {}'.format(i, current_cost, acc))

            for batch_idx in reversed(range(len(batch_x))):
                # print('\n========')
                # print('BATCH NUM: ', batch_idx)
                # print('========\n')

                AL, caches = L_model_forward(batch_x[batch_idx], parameters, use_batchnorm=use_batchnorm)
                # cant contain zeroes
                AL = AL + 0.0000000000001

                Grads = L_model_backward(AL, batch_y[batch_idx], caches)

                parameters = Update_parameters(parameters, Grads, learning_rate)
                # print(AL)

                cost = compute_cost(AL, batch_y[batch_idx])

                # print('batch cost: ', cost)
                batch_cost_ls.append(cost)


            if current_cost == pre_cost:
                break

            pre_cost = current_cost


        except Exception as e:
            print('error!!!')
            print(e)
            parameters = AL

    print('cost of iter {}: {}, accuracy: {}'.format(i, current_cost, acc))

    return parameters, current_cost, cost_ls, acc_ls, batch_cost_ls








"""MNIST"""
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train, x_val, y_train, y_val = train_test_split( x_train, y_train, test_size=0.2, random_state=42)

x_train_flat = np.array(list(map(lambda x: x.flatten(),x_train)))
x_val_flat = np.array(list(map(lambda x: x.flatten(),x_val)))
x_test_flat = np.array(list(map(lambda x: x.flatten(),x_test)))

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit(x_val_flat)
x_val_flat = scaler.transform(x_val_flat)


# configuration
input_dim = x_train_flat.shape[1]
output_dim = 10
batch_size = 480
num_of_batches = x_train_flat.shape[0]/batch_size
learning_rate = 0.09
num_iterations = 1000
layer_dims = np.array([input_dim,20,7,5,output_dim])
print(layer_dims)
use_batchnorm = False
# X =x_val_flat
# Y = y_val
parameters, cost, cost_ls, acc_ls, batch_cost_ls = L_layer_model(x_val_flat, y_val, layer_dims, learning_rate,  batch_size, num_iterations = num_iterations,use_batchnorm = use_batchnorm)
import pandas as pd
pd.DataFrame()

plt.plot(cost_ls)
plt.show()

plt.plot(acc_ls)
plt.show()

acc_train = Predict(x_train_flat, y_train, parameters,use_batchnorm)
acc_test = Predict(x_test_flat, y_test, parameters,use_batchnorm)


#
#
#
# input_dim = 3
# output_dim = 3
# batch_size = 30
# num_of_batches = 5
# learning_rate = 0.009
# num_iterations = 100
# layer_dims = np.array([input_dim,4,2,output_dim])
# print(layer_dims)
#
#
# # (input size, number of examples)
# X = np.random.randint(1,5,(batch_size*num_of_batches,input_dim))
# # X = np.random.randn(batch_size*num_of_batches,input_dim)
# print('X:',X)
# Y =  np.random.choice(3, batch_size*num_of_batches) # np.array([0,1,2,0,0,0,0,0,0])# np.random.randint(0,output_dim,batch_size)
# use_batchnorm = True
# L_layer_model(X, Y, layer_dims, learning_rate,  batch_size, num_iterations = num_iterations,use_batchnorm = use_batchnorm)
#
# #
# #
#
#
# Zi = np.array([1002.03096915 , 131.00995891 , 350.63659202])
# np.array(list(map(math.exp, Zi))).sum()
#
# math.exp(int(131.03096915))
